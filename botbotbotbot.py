import os
import json
import requests
import telebot
from telebot import types
from datetime import datetime
from dotenv import load_dotenv
import time
import uuid
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
owm_api_key = os.getenv('OPENWEATHERMAP_API_KEY')
logging.debug(f"TELEGRAM_BOT_TOKEN: {bot_token}")
logging.debug(f"OPENWEATHERMAP_API_KEY: {owm_api_key}")

if not bot_token or not owm_api_key:
    logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENWEATHERMAP_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENWEATHERMAP_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(bot_token)
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}")
    raise

OWM_API_KEY = owm_api_key

# –°–ø–∏—Å–∫–∏ –∏–∫–æ–Ω–æ–∫
ICONS = {
    'weather': {
        '—è—Å–Ω–æ': '‚òÄÔ∏è',
        '–æ–±–ª–∞—á–Ω–æ': '‚õÖÔ∏è',
        '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
        '–¥–æ–∂–¥—å': 'üåß',
        '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
        '—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ': 'üåà'
    },
    'mood': {
        '–∞–∫—Ç–∏–≤–Ω–æ–µ': 'üèÉ‚Äç‚ôÇÔ∏è',
        '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ': 'üßò‚Äç‚ôÄÔ∏è',
        '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ': '‚ö°'
    },
    'budget': {
        '–Ω–∏–∑–∫–∏–π': 'üí∞',
        '—Å—Ä–µ–¥–Ω–∏–π': 'üíµ',
        '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π': 'üíé'
    },
    'people': {
        '–æ–¥–∏–Ω': 'üë§',
        '–ø–∞—Ä–∞': 'üë´',
        '–∫–æ–º–ø–∞–Ω–∏—è': 'üë™'
    },
    'actions': {
        'restart': 'üîÑ',
        'city': 'üèôÔ∏è',
        'weather': '‚òÄÔ∏è',
        'budget': 'üí∞',
        'people': 'üë•',
        'history': 'üìú',
        'favorites': '‚≠ê'
    }
}

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
HISTORY_FILE = 'history.json'
FAVORITES_FILE = 'favorites.json'
ACTIVITIES_FILE = 'activities.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
for file in [HISTORY_FILE, FAVORITES_FILE, ACTIVITIES_FILE]:
    if not os.path.exists(file):
        logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file}")
        with open(file, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–∑ activities.json
def load_activities():
    try:
        with open(ACTIVITIES_FILE, 'r', encoding='utf-8') as f:
            activities = json.load(f)
            logging.debug(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {activities}")
            return activities
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {ACTIVITIES_FILE}: {e}")
        return {}

ACTIVITIES = load_activities()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def save_to_file(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        logging.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ {filename}: {e}")

def load_from_file(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            logging.debug(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}")
            return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {filename}: {e}")
        return {}

def add_favorite(user_id, item_type, item):
    favorites = load_from_file(FAVORITES_FILE)
    user_id = str(user_id)
    if user_id not in favorites:
        favorites[user_id] = {"venues": [], "activities": [], "queries": []}

    if item not in favorites[user_id][item_type]:
        favorites[user_id][item_type].append(item)
        save_to_file(FAVORITES_FILE, favorites)
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {item_type} - {item}")
        return True
    return False

def get_favorites(user_id):
    return load_from_file(FAVORITES_FILE).get(str(user_id), {"venues": [], "activities": [], "queries": []})

def save_history(user_id, username, data):
    history = load_from_file(HISTORY_FILE)
    entry = {
        'user_id': user_id,
        'username': username,
        'timestamp': datetime.now().isoformat(),
        'city': data.get('city'),
        'weather': data.get('weather'),
        'temp': data.get('temp'),
        'mood': data.get('mood'),
        'budget': data.get('budget'),
        'people': data.get('people'),
        'activities': data.get('activities', [])
    }

    user_id = str(user_id)
    if user_id not in history:
        history[user_id] = []

    history[user_id].append(entry)
    save_to_file(HISTORY_FILE, history)
    logging.debug(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id: {user_id}")

def get_user_history(user_id):
    history = load_from_file(HISTORY_FILE)
    return history.get(str(user_id), [])

# Overpass API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
def search_places(city, category):
    category_mapping = {
        "–ö–∞—Ñ–µ": ["amenity=cafe"],
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["amenity=restaurant"],
        "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã": ["amenity=cinema"],
        "–ü–∞—Ä–∫–∏": ["leisure=park"],
        "–ú—É–∑–µ–∏": ["tourism=museum"],
        "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã": ["shop=mall"]
    }

    overpass_url = "https://overpass-api.de/api/interpreter"

    if category not in category_mapping:
        logging.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category}")
        return []

    queries = category_mapping[category]
    results = []

    for query in queries:
        overpass_query = f"""
        [out:json];
        area["name"="{city}"]->.searchArea;
        (
          node[{query}](area.searchArea);
          way[{query}](area.searchArea);
          relation[{query}](area.searchArea);
        );
        out center;
        """

        try:
            response = requests.post(overpass_url, data=overpass_query.encode('utf-8'), timeout=10)
            response.raise_for_status()
            data = response.json()
            logging.debug(f"Overpass API response: {data}")

            for element in data.get("elements", []):
                name = element.get("tags", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                address = element.get("tags", {}).get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")

                results.append({
                    "id": element.get("id"),
                    "type": element.get("type"),
                    "name": name,
                    "address": address,
                    "lat": element.get("lat") or element.get("center", {}).get("lat"),
                    "lon": element.get("lon") or element.get("center", {}).get("lon")
                })

                if len(results) >= 15:
                    break

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Overpass API: {e}")

    return results

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üéØ –ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è", "üè¢ –ù–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è")
    keyboard.add("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "üìú –ò—Å—Ç–æ—Ä–∏—è")
    logging.debug("–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
    return keyboard

def create_categories_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    categories = ["–ö–∞—Ñ–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã", "–ü–∞—Ä–∫–∏", "–ú—É–∑–µ–∏", "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã"]
    buttons = [types.InlineKeyboardButton(text=cat, callback_data=f"category_{cat}") for cat in categories]
    keyboard.add(*buttons)
    logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞")
    return keyboard

def create_places_keyboard(places, query_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for place in places:
        callback_data = f"place_{query_id}_{place['type']}_{place['id']}"
        keyboard.add(types.InlineKeyboardButton(
            text=f"üè¢ {place['name']}",
            callback_data=callback_data
        ))
    keyboard.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    logging.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è query_id: {query_id}")
    return keyboard

def create_place_details_keyboard(place_id, place_type, query_id, is_favorite=False):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if not is_favorite:
        callback_data = f"favplace_{query_id}_{place_type}_{place_id}"
        keyboard.add(types.InlineKeyboardButton(
            text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=callback_data
        ))

    map_callback = f"map_{place_type}_{place_id}"
    back_callback = f"back_to_places_{query_id}"
    keyboard.add(
        types.InlineKeyboardButton(text="üìç –ù–∞ –∫–∞—Ä—Ç–µ", callback_data=map_callback),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
    )
    logging.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è place_id: {place_id}")
    return keyboard

def create_inline_keyboard(items, prefix="", add_back=False, add_cancel=False):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for item in items:
        callback_data = f"{prefix}_{item}"
        buttons.append(types.InlineKeyboardButton(
            text=f"{ICONS.get(prefix, {}).get(item, '')} {item.capitalize()}",
            callback_data=callback_data
        ))
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {item}, callback_data: {callback_data}")
    if add_back:
        buttons.append(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'")
    if add_cancel:
        buttons.append(types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        logging.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞'")
    if not buttons:
        logging.warning("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞, –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    keyboard.add(*buttons)
    logging.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {prefix}: {items}")
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–¢–∏–°–∫–£–∫–ê –ë–û–¢ (OSM –≤–µ—Ä—Å–∏—è)!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏:\n"
        "üéØ - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø–æ–≥–æ–¥–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é\n"
        "üè¢ - –õ—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ OpenStreetMap\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_keyboard())
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chat_id: {message.chat.id}")

@bot.message_handler(commands=['history'])
def show_history_command(message):
    history = get_user_history(message.chat.id)
    if not history:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –¥–ª—è chat_id: {message.chat.id}")
        return

    history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
    for i, entry in enumerate(history[-5:], 1):
        history_text += (
            f"{i}. {entry['timestamp'][:10]} {entry['timestamp'][11:16]}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {entry['city']}\n"
            f"{ICONS['weather'][entry['weather']]} –ü–æ–≥–æ–¥–∞: {entry['weather']} ({entry['temp']}¬∞C)\n"
            f"{ICONS['mood'][entry['mood']]} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {entry['mood']}\n"
            f"{ICONS['budget'][entry['budget']]} –ë—é–¥–∂–µ—Ç: {entry['budget']}\n"
            f"{ICONS['people'][entry['people']]} –£—á–∞—Å—Ç–Ω–∏–∫–∏: {entry['people']}\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        )
        for j, activity in enumerate(entry.get('activities', [])[:3], 1):
            history_text += f"   {j}. {activity}\n"
        history_text += "\n"

    bot.send_message(message.chat.id, history_text)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è chat_id: {message.chat.id}")

@bot.message_handler(commands=['favorites'])
def show_favorites_command(message):
    show_favorites(message)

@bot.message_handler(func=lambda msg: msg.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
def show_favorites(message):
    favorites = get_favorites(message.chat.id)
    if not any(favorites.values()):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        logging.info(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ –¥–ª—è chat_id: {message.chat.id}")
        return

    text = "‚≠ê <b>–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"
    if favorites["venues"]:
        text += "üè¢ <b>–ó–∞–≤–µ–¥–µ–Ω–∏—è:</b>\n"
        for venue in favorites["venues"]:
            text += f"- {venue['name']} ({venue['address']})\n"
        text += "\n"

    if favorites["activities"]:
        text += "üéØ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"
        for activity in favorites["activities"]:
            text += f"- {activity}\n"
        text += "\n"

    if favorites["queries"]:
        text += "üîç <b>–ó–∞–ø—Ä–æ—Å—ã:</b>\n"
        for query in favorites["queries"]:
            text += f"- {query['city']} ({query['weather']}, {query['mood']})\n"

    bot.send_message(message.chat.id, text, parse_mode="HTML")
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è chat_id: {message.chat.id}")

@bot.message_handler(func=lambda msg: msg.text == "üè¢ –ù–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è")
def ask_city_for_places(message):
    msg = bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è?")
    bot.register_next_step_handler(msg, process_city_for_places)
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π, chat_id: {message.chat.id}")

def process_city_for_places(message):
    user_data[message.chat.id] = {
        "city": message.text.strip(),
        "step": "places_category"
    }
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_categories_keyboard())
    logging.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –≥–æ—Ä–æ–¥ {message.text.strip()} –¥–ª—è chat_id: {message.chat.id}")

@bot.message_handler(func=lambda msg: msg.text == "üéØ –ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è")
def ask_city_for_activities(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_city_for_activities)
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π, chat_id: {message.chat.id}")

def process_city_for_activities(message):
    try:
        city = message.text.strip()
        logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city}")

        weather = get_weather_data(city)
        weather_desc = get_weather_description(weather['weather_code'])
        logging.debug(f"–ü–æ–≥–æ–¥–∞: {weather_desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C")

        user_data[message.chat.id] = {
            'step': 'mood',
            'city': city,
            'weather': weather_desc,
            'temp': weather['temp']
        }
        logging.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ user_data: {user_data[message.chat.id]}")

        weather_text = (
            f"{ICONS['weather'][weather_desc]} –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather['description']}\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n\n"
            f"–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
        )

        keyboard = create_inline_keyboard(['–∞–∫—Ç–∏–≤–Ω–æ–µ', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ', '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ'], 'mood', add_back=True, add_cancel=True)
        bot.send_message(
            message.chat.id,
            weather_text,
            reply_markup=keyboard
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è chat_id: {message.chat.id}")

    except Exception as e:
        error_text = (
            f"{ICONS['weather']['—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ']} –û—à–∏–±–∫–∞!\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:"
        )
        bot.send_message(message.chat.id, error_text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        bot.register_next_step_handler(msg, process_city_for_activities)
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_city_for_activities: {str(e)}")

def get_weather_data(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logging.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}, URL: {url}")
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        logging.debug(f"–û—Ç–≤–µ—Ç API: {data}")

        if data['cod'] != 200:
            raise Exception(data.get('message', 'Unknown error'))

        return {
            'temp': data['main']['temp'],
            'weather_code': data['weather'][0]['id'],
            'description': data['weather'][0]['description'],
            'humidity': data['main']['humidity'],
            'wind': data['wind']['speed']
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")

def get_weather_description(weather_code):
    if weather_code == 800:
        return "—è—Å–Ω–æ"
    elif weather_code in [801, 802]:
        return "–æ–±–ª–∞—á–Ω–æ"
    elif weather_code in [803, 804]:
        return "–ø–∞—Å–º—É—Ä–Ω–æ"
    elif weather_code in [300, 301, 302, 310, 311, 312, 313, 314, 321, 500, 501, 502, 503, 504, 511, 520, 521, 522, 531]:
        return "–¥–æ–∂–¥—å"
    elif weather_code in [600, 601, 602, 611, 612, 613, 615, 616, 620, 621, 622]:
        return "—Å–Ω–µ–≥"
    else:
        return "—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ"

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def show_places(call):
    category = call.data.split('_')[1]
    chat_id = call.message.chat.id
    city = user_data.get(chat_id, {}).get("city")

    if not city:
        bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        logging.warning(f"–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è chat_id: {chat_id}")
        return

    bot.answer_callback_query(call.id, f"–ò—â–µ–º {category.lower()} –≤ {city}...")
    logging.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π: {category} –≤ {city} –¥–ª—è chat_id: {chat_id}")

    try:
        places = search_places(city, category)
        if not places:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ {category.lower()} –≤ {city}",
                reply_markup=None
            )
            logging.info(f"–ó–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {category} –≤ {city}")
            return

        query_id = str(uuid.uuid4())
        user_data[chat_id]["current_query"] = {
            "id": query_id,
            "category": category,
            "places": places
        }

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"üè¢ {category} –≤ {city} (–Ω–∞–π–¥–µ–Ω–æ {len(places)}):",
            reply_markup=create_places_keyboard(places, query_id)
        )
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
            reply_markup=None
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('place_'))
def show_place_details(call):
    try:
        _, query_id, place_type, place_id = call.data.split('_')
        chat_id = call.message.chat.id

        place = next((p for p in user_data[chat_id]["current_query"]["places"]
                     if str(p["id"]) == place_id and p["type"] == place_type), None)
        if not place:
            bot.answer_callback_query(call.id, "–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logging.warning(f"–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {place_id}, type: {place_type}")
            return

        favorites = get_favorites(chat_id)
        is_favorite = any(v['id'] == place["id"] and v['type'] == place_type
                         for v in favorites["venues"])

        text = (
            f"üè¢ <b>{place['name']}</b>\n"
            f"üìç –ê–¥—Ä–µ—Å: {place['address']}\n"
            f"üó∫Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[chat_id]['current_query']['category']}\n"
        )

        keyboard = create_place_details_keyboard(place["id"], place_type, query_id, is_favorite)

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞ –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_place_details: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('favplace_'))
def add_place_to_favorites(call):
    try:
        _, query_id, place_type, place_id = call.data.split('_')
        chat_id = call.message.chat.id

        place = next((p for p in user_data[chat_id]["current_query"]["places"]
                     if str(p["id"]) == place_id and p["type"] == place_type), None)
        if not place:
            bot.answer_callback_query(call.id, "–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logging.warning(f"–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {place_id}")
            return

        venue_data = {
            "id": place["id"],
            "type": place_type,
            "name": place["name"],
            "address": place["address"],
            "category": user_data[chat_id]["current_query"]["category"],
            "city": user_data[chat_id]["city"],
            "lat": place.get("lat"),
            "lon": place.get("lon")
        }

        if add_favorite(chat_id, "venues", venue_data):
            bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            text = call.message.text
            keyboard = create_place_details_keyboard(place["id"], place_type, query_id, True)
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            logging.info(f"–ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è chat_id: {chat_id}")
        else:
            bot.answer_callback_query(call.id, "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            logging.info(f"–ú–µ—Å—Ç–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_place_to_favorites: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('map_'))
def show_on_map(call):
    try:
        _, place_type, place_id = call.data.split('_')
        chat_id = call.message.chat.id

        place = None
        if "current_query" in user_data.get(chat_id, {}):
            place = next((p for p in user_data[chat_id]["current_query"]["places"]
                         if str(p["id"]) == place_id and p["type"] == place_type), None)

        if not place:
            favorites = get_favorites(chat_id)
            place = next((p for p in favorites["venues"]
                         if str(p["id"]) == place_id and p["type"] == place_type), None)

        if place and "lat" in place and "lon" in place:
            map_url = f"https://www.openstreetmap.org/?mlat={place['lat']}&mlon={place['lon']}#map=18/{place['lat']}/{place['lon']}"
            bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—É...", url=map_url)
            logging.debug(f"–û—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –º–µ—Å—Ç–∞: {place['name']}")
        else:
            bot.answer_callback_query(call.id, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logging.warning(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –º–µ—Å—Ç–∞: {place_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_on_map: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_'))
def handle_back(call):
    try:
        action = call.data.split('_')[2]
        chat_id = call.message.chat.id

        if action == "categories":
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=create_categories_keyboard()
            )
            logging.debug(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è chat_id: {chat_id}")
        elif action == "places":
            query_id = call.data.split('_')[3]
            if "current_query" in user_data.get(chat_id, {}):
                places = user_data[chat_id]["current_query"]["places"]
                category = user_data[chat_id]["current_query"]["category"]
                city = user_data[chat_id]["city"]

                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"üè¢ {category} –≤ {city} (–Ω–∞–π–¥–µ–Ω–æ {len(places)}):",
                    reply_markup=create_places_keyboard(places, query_id)
                )
                logging.debug(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–µ—Å—Ç –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_back: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def handle_back_button(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=None
    )
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_city_for_activities)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è chat_id: {call.message.chat.id}")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel_button(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )
    cleanup_user_data(call.message.chat.id)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è chat_id: {call.message.chat.id}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('mood_'))
def process_mood(call):
    try:
        mood = call.data.split('_')[1]
        chat_id = call.message.chat.id

        user_data[chat_id]['mood'] = mood
        user_data[chat_id]['step'] = 'budget'

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n\n–í—ã–±—Ä–∞–Ω–æ: {ICONS['mood'][mood]} {mood.capitalize()}",
            reply_markup=None
        )

        bot.send_message(
            chat_id,
            f"{ICONS['actions']['budget']} –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:",
            reply_markup=create_inline_keyboard(['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π'], 'budget', add_back=True, add_cancel=True)
        )
        logging.debug(f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood} –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_mood: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('budget_'))
def process_budget(call):
    try:
        budget = call.data.split('_')[1]
        chat_id = call.message.chat.id

        user_data[chat_id]['budget'] = budget
        user_data[chat_id]['step'] = 'people'

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n\n–í—ã–±—Ä–∞–Ω–æ: {ICONS['budget'][budget]} {budget.capitalize()}",
            reply_markup=None
        )

        bot.send_message(
            chat_id,
            f"{ICONS['actions']['people']} –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?",
            reply_markup=create_inline_keyboard(['–æ–¥–∏–Ω', '–ø–∞—Ä–∞', '–∫–æ–º–ø–∞–Ω–∏—è'], 'people', add_back=True, add_cancel=True)
        )
        logging.debug(f"–í—ã–±—Ä–∞–Ω –±—é–¥–∂–µ—Ç: {budget} –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_budget: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('people_'))
def process_people(call):
    try:
        people = call.data.split('_')[1]
        chat_id = call.message.chat.id
        data = user_data[chat_id]

        data['people'] = people

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=f"{call.message.text}\n\n–í—ã–±—Ä–∞–Ω–æ: {ICONS['people'][people]} {people.capitalize()}",
            reply_markup=None
        )

        key = f"{data['weather']}_{data['mood']}_{data['budget']}_{data['people']}"
        options = ACTIVITIES.get(key, ["–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"])
        data['activities'] = options

        query_id = str(uuid.uuid4())[:8]
        data['query_id'] = query_id

        result_text = (
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {data['city']}:\n\n"
            f"{ICONS['weather'][data['weather']]} –ü–æ–≥–æ–¥–∞: {data['weather']}\n"
            f"{ICONS['mood'][data['mood']]} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data['mood']}\n"
            f"{ICONS['budget'][data['budget']]} –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
            f"{ICONS['people'][data['people']]} –£—á–∞—Å—Ç–Ω–∏–∫–∏: {data['people']}\n\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—É–≥–∞:\n"
        )

        for i, option in enumerate(options, 1):
            result_text += f"{i}. {option}\n"

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton(
                text=f"{ICONS['actions']['restart']} –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                callback_data="restart"
            ),
            types.InlineKeyboardButton(
                text=f"{ICONS['actions']['history']} –ò—Å—Ç–æ—Ä–∏—è",
                callback_data="show_history"
            ),
            types.InlineKeyboardButton(
                text="üè¢ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è",
                callback_data=f"venues_{query_id}"
            )
        ]

        for i, option in enumerate(options[:3], 1):
            callback_data = f"fav_{query_id}_{i-1}"
            buttons.append(types.InlineKeyboardButton(
                text=f"‚≠ê –í–∞—Ä–∏–∞–Ω—Ç {i}",
                callback_data=callback_data
            ))

        keyboard.add(*buttons)

        user_data[chat_id]['current_activities'] = {
            'options': options,
            'query_id': query_id
        }

        bot.send_message(chat_id, result_text, reply_markup=keyboard)
        save_history(chat_id, call.from_user.username or call.from_user.first_name, data)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_people: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_bot(call):
    send_welcome(call.message)
    cleanup_user_data(call.message.chat.id)
    logging.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è chat_id: {call.message.chat.id}")

@bot.callback_query_handler(func=lambda call: call.data == "show_history")
def show_history_callback(call):
    show_history_command(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('fav_'))
def handle_fav_activity(call):
    try:
        _, query_id, option_idx = call.data.split('_')
        chat_id = call.message.chat.id

        activities_data = user_data.get(chat_id, {}).get('current_activities', {})
        if str(query_id) != activities_data.get('query_id', ''):
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            logging.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π query_id: {query_id} –¥–ª—è chat_id: {chat_id}")
            return

        option_idx = int(option_idx)
        activity = activities_data['options'][option_idx]

        if add_favorite(chat_id, "activities", activity):
            bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            logging.info(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {activity} –¥–ª—è chat_id: {chat_id}")
        else:
            bot.answer_callback_query(call.id, "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            logging.info(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {activity} –¥–ª—è chat_id: {chat_id}")

    except (IndexError, ValueError) as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ({str(e)})")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_fav_activity: {str(e)}")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_fav_activity: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('venues_'))
def show_venues_for_query(call):
    try:
        query_id = call.data.split('_')[1]
        chat_id = call.message.chat.id

        data = user_data.get(chat_id, {})
        if 'city' not in data or str(data.get('query_id', '')) != query_id:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            logging.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è query_id: {query_id} –¥–ª—è chat_id: {chat_id}")
            return

        user_data[chat_id] = {
            "city": data['city'],
            "step": "places_category",
            "from_query_id": query_id
        }

        bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ {data['city']}:",
                        reply_markup=create_categories_keyboard())
        logging.debug(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {data['city']} –¥–ª—è chat_id: {chat_id}")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_venues_for_query: {str(e)}")

def cleanup_user_data(chat_id):
    if chat_id in user_data:
        keep_keys = ['city', 'step', 'current_query', 'current_activities']
        user_data[chat_id] = {k: v for k, v in user_data[chat_id].items() if k in keep_keys}
        logging.debug(f"–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id: {chat_id}")

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (OSM –≤–µ—Ä—Å–∏—è)...")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
        bot.infinity_polling(timeout=10, long_polling_timeout=5)